<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    <script type = 'text/javascript' >
        var appInsights=window.appInsights||function(config)
        {
            function r(config){ t[config] = function(){ var i = arguments; t.queue.push(function(){ t[config].apply(t, i)})} }
            var t = { config:config},u=document,e=window,o='script',s=u.createElement(o),i,f;for(s.src=config.url||'//az416426.vo.msecnd.net/scripts/a/ai.0.js',u.getElementsByTagName(o)[0].parentNode.appendChild(s),t.cookie=u.cookie,t.queue=[],i=['Event','Exception','Metric','PageView','Trace','Ajax'];i.length;)r('track'+i.pop());return r('setAuthenticatedUserContext'),r('clearAuthenticatedUserContext'),config.disableExceptionTracking||(i='onerror',r('_'+i),f=e[i],e[i]=function(config, r, u, e, o) { var s = f && f(config, r, u, e, o); return s !== !0 && t['_' + i](config, r, u, e, o),s}),t
        }({
            instrumentationKey:'9d253dc5-68ac-49e7-9987-5f1a190c65af'
        });
        
        window.appInsights=appInsights;
        appInsights.trackPageView();
    </script>
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("FMT IoT", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Home", "Index", "Home", new { area = "" }, null)</li>
                </ul>
            </div>
        </div>
    </div>
   
    @RenderBody()
    <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - My ASP.NET Application</p>
        </footer>


    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/d3")


    @RenderSection("scripts", required: false)
    <script src="//d3js.org/d3.v3.min.js" charset="utf-8"></script>
    @*<script>
        var data = [
          { letter: "A", frequency: 4 },
          { letter: "B", frequency: 8 },
          { letter: "C", frequency: 15 },
          { letter: "D", frequency: 16 },
          { letter: "E", frequency: 23 },
          { letter: "F", frequency: 42 }
        ];
        var svg = d3.select("svg"),
            margin = {top: 20, right: 20, bottom: 30, left: 40},
            width = +svg.attr("width") - margin.left - margin.right,
            height = +svg.attr("height") - margin.top - margin.bottom;

        var x = d3.scaleBand().rangeRound([0, width]).padding(0.1),
            y = d3.scaleLinear().rangeRound([height, 0]);

        var g = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");




          x.domain(data.map(function(d) { return d.letter; }));
          y.domain([0, d3.max(data, function(d) { return d.frequency; })]);

          g.append("g")
              .attr("class", "axis axis--x")
              .attr("transform", "translate(0," + height + ")")
              .call(d3.axisBottom(x));

          g.append("g")
              .attr("class", "axis axis--y")
              .call(d3.axisLeft(y).ticks(15))
            .append("text")
              .attr("transform", "rotate(-90)")
              .attr("y", 6)
              .attr("dy", "0.71em")
              .attr("text-anchor", "end")
              .text("Frequency");

          g.selectAll(".bar")
            .data(data)
            .enter().append("rect")
              .attr("class", "bar")
              .attr("x", function(d) { return x(d.letter); })
              .attr("y", function(d) { return y(d.frequency); })
              .attr("width", x.bandwidth())
              .attr("height", function(d) { return height - y(d.frequency); });
    </script>*@

    @*<script>
        var svg = d3.select("#line_chart"),
            margin = { top: 20, right: 20, bottom: 30, left: 50 },
            width = +svg.attr("width") - margin.left - margin.right,
            height = +svg.attr("height") - margin.top - margin.bottom,
            g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            var parseTime = d3.timeParse("%d-%b-%y");

            var x = d3.scaleTime()
                .rangeRound([0, width]);

            var y = d3.scaleLinear()
                .rangeRound([height, 0]);

            var line = d3.line()
                .x(function (d) { return x(d.date); })
                .y(function (d) { return y(d.close); });

            d3.tsv("./Content/data.tsv", function (d) {
                d.date = parseTime(d.date);
                d.close = +d.close;
                return d;
            }, function (error, data) {
                if (error) throw error;

                x.domain(d3.extent(data, function (d) { return d.date; }));
                y.domain(d3.extent(data, function (d) { return d.close; }));

                g.append("g")
                    .attr("class", "axis axis--x")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x));

                g.append("g")
                    .attr("class", "axis axis--y")
                    .call(d3.axisLeft(y))
                    .append("text")
                    .attr("fill", "#000")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 6)
                    .attr("dy", "0.71em")
                    .style("text-anchor", "end")
                    .text("Price ($)");

                g.append("path")
                    .datum(data)
                    .attr("class", "line")
                    .attr("d", line);
            });

    </script>*@
    <script>
        var svg2 = d3.select("#line_chart"),
            margin2 = { top: 20, right: 20, bottom: 30, left: 50 },
            width2 = +svg2.attr("width") - margin2.left - margin2.right,
            height2 = +svg2.attr("height") - margin2.top - margin2.bottom,
            g2 = svg2.append("g").attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");

            //var parseTime = d3.timeParse("%d-%b-%y");
            var parseTime2 = d3.time.format("%d-%b-%y").parse,
                bisectDate2 = d3.bisector(function (d) { return d.date; }).left,
                formatValue2 = d3.format(",.2f"),
                formatCurrency2 = function (d) { return "$" + formatValue(d); };

            var x2 = d3.time.scale()
                .rangeRound([0, width2]);

            var y2 = d3.scale.linear()
                .rangeRound([height2, 0]);
            
            var xAxis2 = d3.svg.axis()
                .scale(x2)
                .orient("bottom");

            var yAxis2 = d3.svg.axis()
                .scale(y2)
                .orient("left");

            var line2 = d3.svg.line()
                .x(function (d) { return x(d.date); })
                .y(function (d) { return y(d.close); });

            d3.tsv("./Content/data.tsv",  function (error, data) {
                if (error) throw error;

                data.forEach(function (d) {
                    d.date = parseTime(d.date);
                    d.close = +d.close;
                });

                data.sort(function (a, b) {
                    return a.date - b.date;
                });

                x2.domain([data[0].date, data[data.length - 1].date]);
                y2.domain(d3.extent(data, function (d) { return d.close; }));

                g2.append("g")
                    .attr("class", "x axis")
                    .attr("transform", "translate(0," + height2 + ")")
                    .call(xAxis2);

                g2.append("g")
                    .attr("class", "y axis")
                    .call(yAxis2)
                    .append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 6)
                    .attr("dy", ".71em")
                    .style("text-anchor", "end")
                    .text("Price ($)");

                g2.append("path")
                    .datum(data)
                    .attr("class", "line")
                    .attr("d", line2);

                var focus2 = g2.append("g")
                .attr("class", "focus")
                .style("display", "none");

                focus2.append("circle")
                    .style("fill", "red")
                    .attr("r", 4.5);

                focus2.append("text")
                    .style("font-size", "34px")
                    .attr("x", -4)
                    .attr("dy", "-2.35em");
                g2.append("rect")
                    .attr("class", "overlay")
                    .attr("width", width2)
                    .attr("height", height2)
                    .on("mouseover", function () { focus2.style("display", null); })
                    .on("mouseout", function () { focus2.style("display", "none"); })
                    .on("mousemove", mousemove);

                function mousemove() {
                    var x02 = x2.invert(d3.mouse(this)[0]),
                        i2 = bisectDate(data, x02, 1),
                        d02 = data[i2 - 1],
                        d12 = data[i2],
                        d2 = x02 - d02.date > d12.date - x02 ? d12 : d02;
                    focus2.attr("transform", "translate(" + x2(d2.date) + "," + y2(d2.close) + ")");
                    focus2.select("text").text(formatCurrency(d2.close));
                }
            });

    </script>
    <script>
        var svg = d3.select("#bivariate"),
            margin = { top: 20, right: 20, bottom: 30, left: 50 },
            width = +svg.attr("width") - margin.left - margin.right,
            height = +svg.attr("height") - margin.top - margin.bottom,
            g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            //var parseTime = d3.timeParse("%d-%b-%y");
            var parseTime = d3.time.format("%Y%m%d").parse;
    
            var x = d3.time.scale()
                .rangeRound([0, width]);

            var y = d3.scale.linear()
                .rangeRound([height, 0]);

            var xAxis = d3.svg.axis()
                .scale(x)
                .orient("bottom");

            var yAxis = d3.svg.axis()
                .scale(y)
                .orient("left");

            var area = d3.svg.area()
                .x(function (d) { return x(d.date); })
                .y0(function (d) { return y(d.low); })
                .y1(function (d) { return y(d.high); });

            d3.tsv("./Content/data.tsv",  function (error, data) {
                if (error) throw error;

                data.forEach(function (d) {
                    d.date = parseTime(d.date);
                    d.high = +d.high;
                    d.low = +d.low;
                });

                x.domain(d3.extent(data, function (d) { return d.date; }));
                y.domain([d3.min(data, function (d) { return d.low; }), d3.max(data, function (d) { return d.high; })]);

                g.append("path")
                    .datum(data)
                    .attr("class", "area")
                    .attr("d", area);

                g.append("g")
                    .attr("class", "x axis")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis);

                g.append("g")
                    .attr("class", "y axis")
                    .call(yAxis)
                    .append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 6)
                    .attr("dy", ".71em")
                    .style("text-anchor", "end")
                    .text("Price ($)");

                
            });

    </script>

</body>
</html>
